name: Deploy EC2 Instance con HTML

on:
  push:
    branches:
      - main

jobs:
  deploy-ec2:
    runs-on: ubuntu-latest

    env:
      SECURITY_GROUP_ID: sg-0361716adb525de2c
      SUBNET_ID: subnet-05884d1ff9153e02a

    steps:
      - name: Checkout code
        uses: actions/checkout@v3



      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Generate SSH Key Pair
        run: |
          ssh-keygen -t rsa -b 2048 -f ddg-dl-temp -N "" -q
          echo "Claves generadas"

      - name: Import Public Key to AWS
        run: |
          aws ec2 import-key-pair \
            --key-name temp-key-${{ github.run_id }} \
            --public-key-material "$(cat ddg-dl-temp.pub)"

      - name: Launch EC2 Instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0c02fb55956c7d316 \
            --count 1 \
            --instance-type t2.micro \
            --key-name temp-key-${{ github.run_id }} \
            --security-group-ids ${{ env.SECURITY_GROUP_ID }} \
            --subnet-id ${{ env.SUBNET_ID }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=demodogo-dl-instance}]' \
            --query "Instances[].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          

      - name: Get EC2 Public IP
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV


      - name: Deploy HTML to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i -ddg-dl-temp index.html ec2-user@${{ env.PUBLIC_IP }}:/tmp/index.html
          ssh -o StrictHostKeyChecking=no -i ddg-dl-temp ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
            sudo yum update -y
            sudo yum install -y httpd
            sudo mv /tmp/index.html /var/www/html/index.html
            sudo systemctl start httpd
            sudo systemctl enable httpd
          EOF
          echo "HTML desplegado: http://${{ env.PUBLIC_IP }}"


      - name: Create AMI from EC2 Instance
        run: |
          aws ec2 create-image \
            --instance-id ${{ env.INSTANCE_ID }} \
            --name "dl-ami-${{ github.run_id }}"
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "AMI creada desde la instancia ${{ env.INSTANCE_ID }}."



      - name: Launch New Instance from Custom AMI
        run: |
          NEW_INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ env.IMAGE_ID }} \
            --count 1 \
            --instance-type t2.micro \
            --key-name temp-key-${{ github.run_id }} \
            --security-group-ids ${{ env.SECURITY_GROUP_ID }} \
            --subnet-id ${{ env.SUBNET_ID }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=InstanciaConAMICuston}]' \
            --query 'Instances[0].InstanceId' --output text)
          echo "Instancia creada con AMI custom: $NEW_INSTANCE_ID"

      - name: Clean Up Resources
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }} ${{ env.NEW_INSTANCE_ID }}
          aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }} ${{ env.NEW_INSTANCE_ID }}
          aws ec2 delete-key-pair --key-name temp-key-${{ github.run_id }}
          rm -f ddg-dl-temp ddg-dl-temp.pub
          aws ec2 deregister-image --image-id ${{ env.IMAGE_ID }}
          echo "Recursos eliminados"
